{"abi":[{"type":"function","name":"WETH","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IWETH"}],"stateMutability":"view"},{"type":"function","name":"batchSwap","inputs":[{"name":"kind","type":"uint8","internalType":"enum IVault.SwapKind"},{"name":"swaps","type":"tuple[]","internalType":"struct IVault.BatchSwapStep[]","components":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"assetInIndex","type":"uint256","internalType":"uint256"},{"name":"assetOutIndex","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"funds","type":"tuple","internalType":"struct IVault.FundManagement","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]},{"name":"limits","type":"int256[]","internalType":"int256[]"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256[]","internalType":"int256[]"}],"stateMutability":"payable"},{"type":"function","name":"deregisterTokens","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"exitPool","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"request","type":"tuple","internalType":"struct IVault.ExitPoolRequest","components":[{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"minAmountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"flashLoan","inputs":[{"name":"recipient","type":"address","internalType":"contract IFlashLoanRecipient"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getActionId","inputs":[{"name":"selector","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getAuthorizer","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAuthorizer"}],"stateMutability":"view"},{"type":"function","name":"getDomainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getInternalBalance","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getNextNonce","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPausedState","inputs":[],"outputs":[{"name":"paused","type":"bool","internalType":"bool"},{"name":"pauseWindowEndTime","type":"uint256","internalType":"uint256"},{"name":"bufferPeriodEndTime","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPool","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint8","internalType":"enum IVault.PoolSpecialization"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenInfo","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"cash","type":"uint256","internalType":"uint256"},{"name":"managed","type":"uint256","internalType":"uint256"},{"name":"lastChangeBlock","type":"uint256","internalType":"uint256"},{"name":"assetManager","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokens","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"balances","type":"uint256[]","internalType":"uint256[]"},{"name":"lastChangeBlock","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProtocolFeesCollector","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IProtocolFeesCollector"}],"stateMutability":"view"},{"type":"function","name":"hasApprovedRelayer","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"relayer","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"joinPool","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"request","type":"tuple","internalType":"struct IVault.JoinPoolRequest","components":[{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"maxAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"managePoolBalance","inputs":[{"name":"ops","type":"tuple[]","internalType":"struct IVault.PoolBalanceOp[]","components":[{"name":"kind","type":"uint8","internalType":"enum IVault.PoolBalanceOpKind"},{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"manageUserBalance","inputs":[{"name":"ops","type":"tuple[]","internalType":"struct IVault.UserBalanceOp[]","components":[{"name":"kind","type":"uint8","internalType":"enum IVault.UserBalanceOpKind"},{"name":"asset","type":"address","internalType":"contract IAsset"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address payable"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"queryBatchSwap","inputs":[{"name":"kind","type":"uint8","internalType":"enum IVault.SwapKind"},{"name":"swaps","type":"tuple[]","internalType":"struct IVault.BatchSwapStep[]","components":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"assetInIndex","type":"uint256","internalType":"uint256"},{"name":"assetOutIndex","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"funds","type":"tuple","internalType":"struct IVault.FundManagement","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]}],"outputs":[{"name":"assetDeltas","type":"int256[]","internalType":"int256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"registerPool","inputs":[{"name":"specialization","type":"uint8","internalType":"enum IVault.PoolSpecialization"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"registerTokens","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"assetManagers","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setAuthorizer","inputs":[{"name":"newAuthorizer","type":"address","internalType":"contract IAuthorizer"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setPaused","inputs":[{"name":"paused","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRelayerApproval","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"relayer","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"swap","inputs":[{"name":"singleSwap","type":"tuple","internalType":"struct IVault.SingleSwap","components":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"kind","type":"uint8","internalType":"enum IVault.SwapKind"},{"name":"assetIn","type":"address","internalType":"contract IAsset"},{"name":"assetOut","type":"address","internalType":"contract IAsset"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"funds","type":"tuple","internalType":"struct IVault.FundManagement","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]},{"name":"limit","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"event","name":"AuthorizerChanged","inputs":[{"name":"newAuthorizer","type":"address","indexed":true,"internalType":"contract IAuthorizer"}],"anonymous":false},{"type":"event","name":"ExternalBalanceTransfer","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"FlashLoan","inputs":[{"name":"recipient","type":"address","indexed":true,"internalType":"contract IFlashLoanRecipient"},{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"feeAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"InternalBalanceChanged","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"delta","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"PausedStateChanged","inputs":[{"name":"paused","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"PoolBalanceChanged","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"liquidityProvider","type":"address","indexed":true,"internalType":"address"},{"name":"tokens","type":"address[]","indexed":false,"internalType":"contract IERC20[]"},{"name":"deltas","type":"int256[]","indexed":false,"internalType":"int256[]"},{"name":"protocolFeeAmounts","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"PoolBalanceManaged","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"assetManager","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"cashDelta","type":"int256","indexed":false,"internalType":"int256"},{"name":"managedDelta","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"PoolRegistered","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"poolAddress","type":"address","indexed":true,"internalType":"address"},{"name":"specialization","type":"uint8","indexed":false,"internalType":"enum IVault.PoolSpecialization"}],"anonymous":false},{"type":"event","name":"RelayerApprovalChanged","inputs":[{"name":"relayer","type":"address","indexed":true,"internalType":"address"},{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"Swap","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"tokenIn","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"tokenOut","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TokensDeregistered","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"tokens","type":"address[]","indexed":false,"internalType":"contract IERC20[]"}],"anonymous":false},{"type":"event","name":"TokensRegistered","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"tokens","type":"address[]","indexed":false,"internalType":"contract IERC20[]"},{"name":"assetManagers","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"WETH()":"ad5c4648","batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)":"945bcec9","deregisterTokens(bytes32,address[])":"7d3aeb96","exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))":"8bdb3913","flashLoan(address,address[],uint256[],bytes)":"5c38449e","getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getDomainSeparator()":"ed24911d","getInternalBalance(address,address[])":"0f5a6efa","getNextNonce(address)":"90193b7c","getPausedState()":"1c0de051","getPool(bytes32)":"f6c00927","getPoolTokenInfo(bytes32,address)":"b05f8e48","getPoolTokens(bytes32)":"f94d4668","getProtocolFeesCollector()":"d2946c2b","hasApprovedRelayer(address,address)":"fec90d72","joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))":"b95cac28","managePoolBalance((uint8,bytes32,address,uint256)[])":"e6c46092","manageUserBalance((uint8,address,uint256,address,address)[])":"0e8e3e84","queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))":"f84d066e","registerPool(uint8)":"09b2760f","registerTokens(bytes32,address[],address[])":"66a9c7d2","setAuthorizer(address)":"058a628f","setPaused(bool)":"16c38b3c","setRelayerApproval(address,address,bool)":"fa6e671d","swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)":"52bbbe29"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract IProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Full external interface for the Vault core contract - no external or public methods exist in the contract that don't override one of these declarations.\",\"events\":{\"AuthorizerChanged(address)\":{\"details\":\"Emitted when a new authorizer is set by `setAuthorizer`.\"},\"ExternalBalanceTransfer(address,address,address,uint256)\":{\"details\":\"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\"},\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"},\"InternalBalanceChanged(address,address,int256)\":{\"details\":\"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address.\"},\"PausedStateChanged(bool)\":{\"details\":\"Emitted every time the pause state changes by `_setPaused`.\"},\"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])\":{\"details\":\"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\"},\"PoolBalanceManaged(bytes32,address,address,int256,int256)\":{\"details\":\"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\"},\"PoolRegistered(bytes32,address,uint8)\":{\"details\":\"Emitted when a Pool is registered by calling `registerPool`.\"},\"RelayerApprovalChanged(address,address,bool)\":{\"details\":\"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\"},\"Swap(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual swap performed by `swap` or `batchSwap`.\"},\"TokensDeregistered(bytes32,address[])\":{\"details\":\"Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\"},\"TokensRegistered(bytes32,address[],address[])\":{\"details\":\"Emitted when a Pool registers tokens by calling `registerTokens`.\"}},\"kind\":\"dev\",\"methods\":{\"WETH()\":{\"details\":\"Returns the Vault's WETH instance.\"},\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"flashLoan(address,address[],uint256[],bytes)\":{\"details\":\"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events.\"},\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current paused state.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"getProtocolFeesCollector()\":{\"details\":\"Returns the current protocol fee module.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":\"IVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@balancer-labs/=node_modules/@balancer-labs/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@pancakeswap/=node_modules/@pancakeswap/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"],\"viaIR\":true},\"sources\":{\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c387331bc3da670d45d54af96b067ea6fce6f3e0e5fac53b86fba73d5e9e874a\",\"dweb:/ipfs/QmYkY4d2TDA4BXpjz1RPQn8rdWvZVTi3pSBbiUSaPFKwtM\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://afb73b213075954086eb7fa4eb4fac4962b779c8dd8c9c72902336d64c13210e\",\"dweb:/ipfs/QmNWFPnoPxo8ToVHrqXaQQF8RPYeNNhV2eZN9EwFS3iHpz\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a70c4c16829f31c75dd0a3987137ed1572a0343ff933dcdcfbef17d5d63307ae\",\"dweb:/ipfs/QmSGBafawe525NbvK8LVN1rsD2yJxaS83QoTNC84evwM2E\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://291a4b4f141ea187a61c3bb1ab16b370012e7e80ddc045671015ab2bfaf3c52c\",\"dweb:/ipfs/QmXvvVdfZC3pAqLst3bW9Fbj8mS9y1t1k7Zqr9BXuKdUHP\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d\",\"dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://b63d22729102954a657432d81b31764e6dbdc7216a6deb991499a73dc4ebbd7b\",\"dweb:/ipfs/QmWRyByegCCJr37yesLi7urtzNk2BBiDEjzbkPpV8TKy1X\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e2695f5ae435de2de9fa9dc3b165f05b5bf876217aba0e4bcbd20943a23fc831\",\"dweb:/ipfs/QmYTmazrQQqjb4znByMiUUviqbXKTebrhpP8MDERZ5PLxz\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e9b30c1b15e3d0990a4a343fac14d2263c4bae4c3bdbeb38489103b4f6f66c39\",\"dweb:/ipfs/QmeQjBDidkLAoq4nknwPPPmunSTvQEZ9shaAhPiJAPmbk6\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7056ea1221db4eacc3e263ea8b9d741c11b1871f745169a39c6f926dab9c403f\",\"dweb:/ipfs/QmabGZff9x43RJUororFfmMzocB2UuZDDBMhhfELEeSJue\"]},\"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6764d2a22a2e23de5235ceb0d06ebb9006f694c59547b8dc82dbc2e215d1f230\",\"dweb:/ipfs/Qmb6BQBgUQno6RAqPPR8qeC3smNEC3Bm6y8ZcWEWZKAfhF\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address","indexed":true}],"type":"event","name":"AuthorizerChanged","anonymous":false},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address","indexed":true},{"internalType":"address","name":"sender","type":"address","indexed":true},{"internalType":"address","name":"recipient","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"ExternalBalanceTransfer","anonymous":false},{"inputs":[{"internalType":"contract IFlashLoanRecipient","name":"recipient","type":"address","indexed":true},{"internalType":"contract IERC20","name":"token","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"uint256","name":"feeAmount","type":"uint256","indexed":false}],"type":"event","name":"FlashLoan","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"contract IERC20","name":"token","type":"address","indexed":true},{"internalType":"int256","name":"delta","type":"int256","indexed":false}],"type":"event","name":"InternalBalanceChanged","anonymous":false},{"inputs":[{"internalType":"bool","name":"paused","type":"bool","indexed":false}],"type":"event","name":"PausedStateChanged","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"address","name":"liquidityProvider","type":"address","indexed":true},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]","indexed":false},{"internalType":"int256[]","name":"deltas","type":"int256[]","indexed":false},{"internalType":"uint256[]","name":"protocolFeeAmounts","type":"uint256[]","indexed":false}],"type":"event","name":"PoolBalanceChanged","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"address","name":"assetManager","type":"address","indexed":true},{"internalType":"contract IERC20","name":"token","type":"address","indexed":true},{"internalType":"int256","name":"cashDelta","type":"int256","indexed":false},{"internalType":"int256","name":"managedDelta","type":"int256","indexed":false}],"type":"event","name":"PoolBalanceManaged","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"address","name":"poolAddress","type":"address","indexed":true},{"internalType":"enum IVault.PoolSpecialization","name":"specialization","type":"uint8","indexed":false}],"type":"event","name":"PoolRegistered","anonymous":false},{"inputs":[{"internalType":"address","name":"relayer","type":"address","indexed":true},{"internalType":"address","name":"sender","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"RelayerApprovalChanged","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"contract IERC20","name":"tokenIn","type":"address","indexed":true},{"internalType":"contract IERC20","name":"tokenOut","type":"address","indexed":true},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false}],"type":"event","name":"Swap","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]","indexed":false}],"type":"event","name":"TokensDeregistered","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]","indexed":false},{"internalType":"address[]","name":"assetManagers","type":"address[]","indexed":false}],"type":"event","name":"TokensRegistered","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"WETH","outputs":[{"internalType":"contract IWETH","name":"","type":"address"}]},{"inputs":[{"internalType":"enum IVault.SwapKind","name":"kind","type":"uint8"},{"internalType":"struct IVault.BatchSwapStep[]","name":"swaps","type":"tuple[]","components":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"assetInIndex","type":"uint256"},{"internalType":"uint256","name":"assetOutIndex","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}]},{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"internalType":"struct IVault.FundManagement","name":"funds","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}]},{"internalType":"int256[]","name":"limits","type":"int256[]"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"batchSwap","outputs":[{"internalType":"int256[]","name":"","type":"int256[]"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"deregisterTokens"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"struct IVault.ExitPoolRequest","name":"request","type":"tuple","components":[{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}]}],"stateMutability":"nonpayable","type":"function","name":"exitPool"},{"inputs":[{"internalType":"contract IFlashLoanRecipient","name":"recipient","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"flashLoan"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"stateMutability":"view","type":"function","name":"getActionId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getDomainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function","name":"getInternalBalance","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getNextNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPausedState","outputs":[{"internalType":"bool","name":"paused","type":"bool"},{"internalType":"uint256","name":"pauseWindowEndTime","type":"uint256"},{"internalType":"uint256","name":"bufferPeriodEndTime","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getPool","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"enum IVault.PoolSpecialization","name":"","type":"uint8"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenInfo","outputs":[{"internalType":"uint256","name":"cash","type":"uint256"},{"internalType":"uint256","name":"managed","type":"uint256"},{"internalType":"uint256","name":"lastChangeBlock","type":"uint256"},{"internalType":"address","name":"assetManager","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"balances","type":"uint256[]"},{"internalType":"uint256","name":"lastChangeBlock","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getProtocolFeesCollector","outputs":[{"internalType":"contract IProtocolFeesCollector","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"relayer","type":"address"}],"stateMutability":"view","type":"function","name":"hasApprovedRelayer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"struct IVault.JoinPoolRequest","name":"request","type":"tuple","components":[{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"}]}],"stateMutability":"payable","type":"function","name":"joinPool"},{"inputs":[{"internalType":"struct IVault.PoolBalanceOp[]","name":"ops","type":"tuple[]","components":[{"internalType":"enum IVault.PoolBalanceOpKind","name":"kind","type":"uint8"},{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"managePoolBalance"},{"inputs":[{"internalType":"struct IVault.UserBalanceOp[]","name":"ops","type":"tuple[]","components":[{"internalType":"enum IVault.UserBalanceOpKind","name":"kind","type":"uint8"},{"internalType":"contract IAsset","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address payable","name":"recipient","type":"address"}]}],"stateMutability":"payable","type":"function","name":"manageUserBalance"},{"inputs":[{"internalType":"enum IVault.SwapKind","name":"kind","type":"uint8"},{"internalType":"struct IVault.BatchSwapStep[]","name":"swaps","type":"tuple[]","components":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"assetInIndex","type":"uint256"},{"internalType":"uint256","name":"assetOutIndex","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}]},{"internalType":"contract IAsset[]","name":"assets","type":"address[]"},{"internalType":"struct IVault.FundManagement","name":"funds","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}]}],"stateMutability":"nonpayable","type":"function","name":"queryBatchSwap","outputs":[{"internalType":"int256[]","name":"assetDeltas","type":"int256[]"}]},{"inputs":[{"internalType":"enum IVault.PoolSpecialization","name":"specialization","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"registerPool","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"address[]","name":"assetManagers","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"registerTokens"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setAuthorizer"},{"inputs":[{"internalType":"bool","name":"paused","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setPaused"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"relayer","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setRelayerApproval"},{"inputs":[{"internalType":"struct IVault.SingleSwap","name":"singleSwap","type":"tuple","components":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"enum IVault.SwapKind","name":"kind","type":"uint8"},{"internalType":"contract IAsset","name":"assetIn","type":"address"},{"internalType":"contract IAsset","name":"assetOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}]},{"internalType":"struct IVault.FundManagement","name":"funds","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"bool","name":"fromInternalBalance","type":"bool"},{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"bool","name":"toInternalBalance","type":"bool"}]},{"internalType":"uint256","name":"limit","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"payable","type":"function","name":"swap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"WETH()":{"details":"Returns the Vault's WETH instance."},"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)":{"details":"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."},"deregisterTokens(bytes32,address[])":{"details":"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event."},"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))":{"details":"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event."},"flashLoan(address,address[],uint256[],bytes)":{"details":"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events."},"getActionId(bytes4)":{"details":"Returns the action identifier associated with the external function described by `selector`."},"getAuthorizer()":{"details":"Returns the Vault's Authorizer."},"getDomainSeparator()":{"details":"Returns the EIP712 domain separator."},"getInternalBalance(address,address[])":{"details":"Returns `user`'s Internal Balance for a set of tokens."},"getNextNonce(address)":{"details":"Returns the next nonce used by an address to sign messages."},"getPausedState()":{"details":"Returns the current paused state."},"getPool(bytes32)":{"details":"Returns a Pool's contract address and specialization setting."},"getPoolTokenInfo(bytes32,address)":{"details":"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager."},"getPoolTokens(bytes32)":{"details":"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead."},"getProtocolFeesCollector()":{"details":"Returns the current protocol fee module."},"hasApprovedRelayer(address,address)":{"details":"Returns true if `user` has approved `relayer` to act as a relayer for them."},"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))":{"details":"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event."},"managePoolBalance((uint8,bytes32,address,uint256)[])":{"details":"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."},"manageUserBalance((uint8,address,uint256,address,address)[])":{"details":"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them."},"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))":{"details":"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction."},"registerPool(uint8)":{"details":"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event."},"registerTokens(bytes32,address[],address[])":{"details":"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event."},"setAuthorizer(address)":{"details":"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."},"setPaused(bool)":{"details":"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited."},"setRelayerApproval(address,address,bool)":{"details":"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event."},"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)":{"details":"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@balancer-labs/=node_modules/@balancer-labs/","@openzeppelin/=node_modules/@openzeppelin/","@pancakeswap/=node_modules/@pancakeswap/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol":"IVault"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol":{"keccak256":"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655","urls":["bzz-raw://c387331bc3da670d45d54af96b067ea6fce6f3e0e5fac53b86fba73d5e9e874a","dweb:/ipfs/QmYkY4d2TDA4BXpjz1RPQn8rdWvZVTi3pSBbiUSaPFKwtM"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol":{"keccak256":"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627","urls":["bzz-raw://afb73b213075954086eb7fa4eb4fac4962b779c8dd8c9c72902336d64c13210e","dweb:/ipfs/QmNWFPnoPxo8ToVHrqXaQQF8RPYeNNhV2eZN9EwFS3iHpz"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol":{"keccak256":"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3","urls":["bzz-raw://a70c4c16829f31c75dd0a3987137ed1572a0343ff933dcdcfbef17d5d63307ae","dweb:/ipfs/QmSGBafawe525NbvK8LVN1rsD2yJxaS83QoTNC84evwM2E"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol":{"keccak256":"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc","urls":["bzz-raw://291a4b4f141ea187a61c3bb1ab16b370012e7e80ddc045671015ab2bfaf3c52c","dweb:/ipfs/QmXvvVdfZC3pAqLst3bW9Fbj8mS9y1t1k7Zqr9BXuKdUHP"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol":{"keccak256":"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249","urls":["bzz-raw://8aac0d9f5ff03e0edeb07e1c400b78edea5948acff7e113ba52fd32f86cad72d","dweb:/ipfs/Qmbh6C53fCjvjoHEVZHNadpRq5KZJzfHpDeR3qYfPgKvZt"],"license":"MIT"},"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol":{"keccak256":"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d","urls":["bzz-raw://b63d22729102954a657432d81b31764e6dbdc7216a6deb991499a73dc4ebbd7b","dweb:/ipfs/QmWRyByegCCJr37yesLi7urtzNk2BBiDEjzbkPpV8TKy1X"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol":{"keccak256":"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6","urls":["bzz-raw://e2695f5ae435de2de9fa9dc3b165f05b5bf876217aba0e4bcbd20943a23fc831","dweb:/ipfs/QmYTmazrQQqjb4znByMiUUviqbXKTebrhpP8MDERZ5PLxz"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol":{"keccak256":"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e","urls":["bzz-raw://e9b30c1b15e3d0990a4a343fac14d2263c4bae4c3bdbeb38489103b4f6f66c39","dweb:/ipfs/QmeQjBDidkLAoq4nknwPPPmunSTvQEZ9shaAhPiJAPmbk6"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol":{"keccak256":"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76","urls":["bzz-raw://7056ea1221db4eacc3e263ea8b9d741c11b1871f745169a39c6f926dab9c403f","dweb:/ipfs/QmabGZff9x43RJUororFfmMzocB2UuZDDBMhhfELEeSJue"],"license":"GPL-3.0-or-later"},"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol":{"keccak256":"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c","urls":["bzz-raw://6764d2a22a2e23de5235ceb0d06ebb9006f694c59547b8dc82dbc2e215d1f230","dweb:/ipfs/Qmb6BQBgUQno6RAqPPR8qeC3smNEC3Bm6y8ZcWEWZKAfhF"],"license":"GPL-3.0-or-later"}},"version":1},"ast":{"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IVault.sol","id":3786,"exportedSymbols":{"IAsset":[3163],"IAuthentication":[3029],"IAuthorizer":[3178],"IERC20":[3159],"IFlashLoanRecipient":[3198],"IProtocolFeesCollector":[3267],"ISignaturesValidator":[3047],"ITemporarilyPausable":[3066],"IVault":[3785],"IWETH":[3081]},"nodeType":"SourceUnit","src":"688:37797:18","nodes":[{"id":3269,"nodeType":"PragmaDirective","src":"688:33:18","nodes":[],"literals":["experimental","ABIEncoderV2"]},{"id":3270,"nodeType":"ImportDirective","src":"723:51:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol","file":"../solidity-utils/openzeppelin/IERC20.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3160,"symbolAliases":[],"unitAlias":""},{"id":3271,"nodeType":"ImportDirective","src":"775:55:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol","file":"../solidity-utils/helpers/IAuthentication.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3030,"symbolAliases":[],"unitAlias":""},{"id":3272,"nodeType":"ImportDirective","src":"831:60:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol","file":"../solidity-utils/helpers/ISignaturesValidator.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3048,"symbolAliases":[],"unitAlias":""},{"id":3273,"nodeType":"ImportDirective","src":"892:60:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol","file":"../solidity-utils/helpers/ITemporarilyPausable.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3067,"symbolAliases":[],"unitAlias":""},{"id":3274,"nodeType":"ImportDirective","src":"953:42:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol","file":"../solidity-utils/misc/IWETH.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3082,"symbolAliases":[],"unitAlias":""},{"id":3275,"nodeType":"ImportDirective","src":"997:22:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol","file":"./IAsset.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3164,"symbolAliases":[],"unitAlias":""},{"id":3276,"nodeType":"ImportDirective","src":"1020:27:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol","file":"./IAuthorizer.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3179,"symbolAliases":[],"unitAlias":""},{"id":3277,"nodeType":"ImportDirective","src":"1048:35:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol","file":"./IFlashLoanRecipient.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3199,"symbolAliases":[],"unitAlias":""},{"id":3278,"nodeType":"ImportDirective","src":"1084:38:18","nodes":[],"absolutePath":"node_modules/@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol","file":"./IProtocolFeesCollector.sol","nameLocation":"-1:-1:-1","scope":3786,"sourceUnit":3268,"symbolAliases":[],"unitAlias":""},{"id":3279,"nodeType":"PragmaDirective","src":"1124:31:18","nodes":[],"literals":["solidity",">=","0.7",".0","<","0.9",".0"]},{"id":3785,"nodeType":"ContractDefinition","src":"1329:37155:18","nodes":[{"id":3293,"nodeType":"FunctionDefinition","src":"2966:61:18","nodes":[],"documentation":{"id":3287,"nodeType":"StructuredDocumentation","src":"2906:55:18","text":" @dev Returns the Vault's Authorizer."},"functionSelector":"aaabadc5","implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"2975:13:18","parameters":{"id":3288,"nodeType":"ParameterList","parameters":[],"src":"2988:2:18"},"returnParameters":{"id":3292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3293,"src":"3014:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$3178","typeString":"contract IAuthorizer"},"typeName":{"id":3290,"nodeType":"UserDefinedTypeName","pathNode":{"id":3289,"name":"IAuthorizer","nameLocations":["3014:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3178,"src":"3014:11:18"},"referencedDeclaration":3178,"src":"3014:11:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$3178","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3013:13:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3300,"nodeType":"FunctionDefinition","src":"3213:59:18","nodes":[],"documentation":{"id":3294,"nodeType":"StructuredDocumentation","src":"3033:175:18","text":" @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n Emits an `AuthorizerChanged` event."},"functionSelector":"058a628f","implemented":false,"kind":"function","modifiers":[],"name":"setAuthorizer","nameLocation":"3222:13:18","parameters":{"id":3298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3297,"mutability":"mutable","name":"newAuthorizer","nameLocation":"3248:13:18","nodeType":"VariableDeclaration","scope":3300,"src":"3236:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$3178","typeString":"contract IAuthorizer"},"typeName":{"id":3296,"nodeType":"UserDefinedTypeName","pathNode":{"id":3295,"name":"IAuthorizer","nameLocations":["3236:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3178,"src":"3236:11:18"},"referencedDeclaration":3178,"src":"3236:11:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$3178","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3235:27:18"},"returnParameters":{"id":3299,"nodeType":"ParameterList","parameters":[],"src":"3271:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3306,"nodeType":"EventDefinition","src":"3363:59:18","nodes":[],"anonymous":false,"documentation":{"id":3301,"nodeType":"StructuredDocumentation","src":"3278:80:18","text":" @dev Emitted when a new authorizer is set by `setAuthorizer`."},"eventSelector":"94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef","name":"AuthorizerChanged","nameLocation":"3369:17:18","parameters":{"id":3305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3304,"indexed":true,"mutability":"mutable","name":"newAuthorizer","nameLocation":"3407:13:18","nodeType":"VariableDeclaration","scope":3306,"src":"3387:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$3178","typeString":"contract IAuthorizer"},"typeName":{"id":3303,"nodeType":"UserDefinedTypeName","pathNode":{"id":3302,"name":"IAuthorizer","nameLocations":["3387:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3178,"src":"3387:11:18"},"referencedDeclaration":3178,"src":"3387:11:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$3178","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3386:35:18"}},{"id":3316,"nodeType":"FunctionDefinition","src":"4622:88:18","nodes":[],"documentation":{"id":3307,"nodeType":"StructuredDocumentation","src":"4518:99:18","text":" @dev Returns true if `user` has approved `relayer` to act as a relayer for them."},"functionSelector":"fec90d72","implemented":false,"kind":"function","modifiers":[],"name":"hasApprovedRelayer","nameLocation":"4631:18:18","parameters":{"id":3312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3309,"mutability":"mutable","name":"user","nameLocation":"4658:4:18","nodeType":"VariableDeclaration","scope":3316,"src":"4650:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3308,"name":"address","nodeType":"ElementaryTypeName","src":"4650:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3311,"mutability":"mutable","name":"relayer","nameLocation":"4672:7:18","nodeType":"VariableDeclaration","scope":3316,"src":"4664:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3310,"name":"address","nodeType":"ElementaryTypeName","src":"4664:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4649:31:18"},"returnParameters":{"id":3315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3316,"src":"4704:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3313,"name":"bool","nodeType":"ElementaryTypeName","src":"4704:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4703:6:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3326,"nodeType":"FunctionDefinition","src":"4899:115:18","nodes":[],"documentation":{"id":3317,"nodeType":"StructuredDocumentation","src":"4716:178:18","text":" @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n Emits a `RelayerApprovalChanged` event."},"functionSelector":"fa6e671d","implemented":false,"kind":"function","modifiers":[],"name":"setRelayerApproval","nameLocation":"4908:18:18","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3319,"mutability":"mutable","name":"sender","nameLocation":"4944:6:18","nodeType":"VariableDeclaration","scope":3326,"src":"4936:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3318,"name":"address","nodeType":"ElementaryTypeName","src":"4936:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3321,"mutability":"mutable","name":"relayer","nameLocation":"4968:7:18","nodeType":"VariableDeclaration","scope":3326,"src":"4960:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3320,"name":"address","nodeType":"ElementaryTypeName","src":"4960:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3323,"mutability":"mutable","name":"approved","nameLocation":"4990:8:18","nodeType":"VariableDeclaration","scope":3326,"src":"4985:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3322,"name":"bool","nodeType":"ElementaryTypeName","src":"4985:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4926:78:18"},"returnParameters":{"id":3325,"nodeType":"ParameterList","parameters":[],"src":"5013:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3335,"nodeType":"EventDefinition","src":"5129:93:18","nodes":[],"anonymous":false,"documentation":{"id":3327,"nodeType":"StructuredDocumentation","src":"5020:104:18","text":" @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."},"eventSelector":"46961fdb4502b646d5095fba7600486a8ac05041d55cdf0f16ed677180b5cad8","name":"RelayerApprovalChanged","nameLocation":"5135:22:18","parameters":{"id":3334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3329,"indexed":true,"mutability":"mutable","name":"relayer","nameLocation":"5174:7:18","nodeType":"VariableDeclaration","scope":3335,"src":"5158:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3328,"name":"address","nodeType":"ElementaryTypeName","src":"5158:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3331,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"5199:6:18","nodeType":"VariableDeclaration","scope":3335,"src":"5183:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3330,"name":"address","nodeType":"ElementaryTypeName","src":"5183:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3333,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"5212:8:18","nodeType":"VariableDeclaration","scope":3335,"src":"5207:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3332,"name":"bool","nodeType":"ElementaryTypeName","src":"5207:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5157:64:18"}},{"id":3348,"nodeType":"FunctionDefinition","src":"6013:107:18","nodes":[],"documentation":{"id":3336,"nodeType":"StructuredDocumentation","src":"5930:78:18","text":" @dev Returns `user`'s Internal Balance for a set of tokens."},"functionSelector":"0f5a6efa","implemented":false,"kind":"function","modifiers":[],"name":"getInternalBalance","nameLocation":"6022:18:18","parameters":{"id":3343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3338,"mutability":"mutable","name":"user","nameLocation":"6049:4:18","nodeType":"VariableDeclaration","scope":3348,"src":"6041:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3337,"name":"address","nodeType":"ElementaryTypeName","src":"6041:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3342,"mutability":"mutable","name":"tokens","nameLocation":"6071:6:18","nodeType":"VariableDeclaration","scope":3348,"src":"6055:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3340,"nodeType":"UserDefinedTypeName","pathNode":{"id":3339,"name":"IERC20","nameLocations":["6055:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"6055:6:18"},"referencedDeclaration":3159,"src":"6055:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3341,"nodeType":"ArrayTypeName","src":"6055:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"6040:38:18"},"returnParameters":{"id":3347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3348,"src":"6102:16:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3344,"name":"uint256","nodeType":"ElementaryTypeName","src":"6102:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3345,"nodeType":"ArrayTypeName","src":"6102:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6101:18:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3356,"nodeType":"FunctionDefinition","src":"6547:72:18","nodes":[],"documentation":{"id":3349,"nodeType":"StructuredDocumentation","src":"6126:416:18","text":" @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."},"functionSelector":"0e8e3e84","implemented":false,"kind":"function","modifiers":[],"name":"manageUserBalance","nameLocation":"6556:17:18","parameters":{"id":3354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"ops","nameLocation":"6597:3:18","nodeType":"VariableDeclaration","scope":3356,"src":"6574:26:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserBalanceOp_$3370_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.UserBalanceOp[]"},"typeName":{"baseType":{"id":3351,"nodeType":"UserDefinedTypeName","pathNode":{"id":3350,"name":"UserBalanceOp","nameLocations":["6574:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3370,"src":"6574:13:18"},"referencedDeclaration":3370,"src":"6574:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceOp_$3370_storage_ptr","typeString":"struct IVault.UserBalanceOp"}},"id":3352,"nodeType":"ArrayTypeName","src":"6574:15:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserBalanceOp_$3370_storage_$dyn_storage_ptr","typeString":"struct IVault.UserBalanceOp[]"}},"visibility":"internal"}],"src":"6573:28:18"},"returnParameters":{"id":3355,"nodeType":"ParameterList","parameters":[],"src":"6618:0:18"},"scope":3785,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":3370,"nodeType":"StructDefinition","src":"6805:165:18","nodes":[],"canonicalName":"IVault.UserBalanceOp","documentation":{"id":3357,"nodeType":"StructuredDocumentation","src":"6625:175:18","text":" @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\nwithout manual WETH wrapping or unwrapping."},"members":[{"constant":false,"id":3360,"mutability":"mutable","name":"kind","nameLocation":"6854:4:18","nodeType":"VariableDeclaration","scope":3370,"src":"6836:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_UserBalanceOpKind_$3375","typeString":"enum IVault.UserBalanceOpKind"},"typeName":{"id":3359,"nodeType":"UserDefinedTypeName","pathNode":{"id":3358,"name":"UserBalanceOpKind","nameLocations":["6836:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3375,"src":"6836:17:18"},"referencedDeclaration":3375,"src":"6836:17:18","typeDescriptions":{"typeIdentifier":"t_enum$_UserBalanceOpKind_$3375","typeString":"enum IVault.UserBalanceOpKind"}},"visibility":"internal"},{"constant":false,"id":3363,"mutability":"mutable","name":"asset","nameLocation":"6875:5:18","nodeType":"VariableDeclaration","scope":3370,"src":"6868:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"},"typeName":{"id":3362,"nodeType":"UserDefinedTypeName","pathNode":{"id":3361,"name":"IAsset","nameLocations":["6868:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3163,"src":"6868:6:18"},"referencedDeclaration":3163,"src":"6868:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":3365,"mutability":"mutable","name":"amount","nameLocation":"6898:6:18","nodeType":"VariableDeclaration","scope":3370,"src":"6890:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"6890:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3367,"mutability":"mutable","name":"sender","nameLocation":"6922:6:18","nodeType":"VariableDeclaration","scope":3370,"src":"6914:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3366,"name":"address","nodeType":"ElementaryTypeName","src":"6914:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3369,"mutability":"mutable","name":"recipient","nameLocation":"6954:9:18","nodeType":"VariableDeclaration","scope":3370,"src":"6938:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3368,"name":"address","nodeType":"ElementaryTypeName","src":"6938:15:18","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"name":"UserBalanceOp","nameLocation":"6812:13:18","scope":3785,"visibility":"public"},{"id":3375,"nodeType":"EnumDefinition","src":"8583:100:18","nodes":[],"canonicalName":"IVault.UserBalanceOpKind","members":[{"id":3371,"name":"DEPOSIT_INTERNAL","nameLocation":"8608:16:18","nodeType":"EnumValue","src":"8608:16:18"},{"id":3372,"name":"WITHDRAW_INTERNAL","nameLocation":"8626:17:18","nodeType":"EnumValue","src":"8626:17:18"},{"id":3373,"name":"TRANSFER_INTERNAL","nameLocation":"8645:17:18","nodeType":"EnumValue","src":"8645:17:18"},{"id":3374,"name":"TRANSFER_EXTERNAL","nameLocation":"8664:17:18","nodeType":"EnumValue","src":"8664:17:18"}],"name":"UserBalanceOpKind","nameLocation":"8588:17:18"},{"id":3385,"nodeType":"EventDefinition","src":"9011:87:18","nodes":[],"anonymous":false,"documentation":{"id":3376,"nodeType":"StructuredDocumentation","src":"8689:317:18","text":" @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n interacting with Pools using Internal Balance.\n Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n address."},"eventSelector":"18e1ea4139e68413d7d08aa752e71568e36b2c5bf940893314c2c5b01eaa0c42","name":"InternalBalanceChanged","nameLocation":"9017:22:18","parameters":{"id":3384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3378,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"9056:4:18","nodeType":"VariableDeclaration","scope":3385,"src":"9040:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"9040:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3381,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"9077:5:18","nodeType":"VariableDeclaration","scope":3385,"src":"9062:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3380,"nodeType":"UserDefinedTypeName","pathNode":{"id":3379,"name":"IERC20","nameLocations":["9062:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"9062:6:18"},"referencedDeclaration":3159,"src":"9062:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3383,"indexed":false,"mutability":"mutable","name":"delta","nameLocation":"9091:5:18","nodeType":"VariableDeclaration","scope":3385,"src":"9084:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3382,"name":"int256","nodeType":"ElementaryTypeName","src":"9084:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9039:58:18"}},{"id":3397,"nodeType":"EventDefinition","src":"9240:111:18","nodes":[],"anonymous":false,"documentation":{"id":3386,"nodeType":"StructuredDocumentation","src":"9104:131:18","text":" @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."},"eventSelector":"540a1a3f28340caec336c81d8d7b3df139ee5cdc1839a4f283d7ebb7eaae2d5c","name":"ExternalBalanceTransfer","nameLocation":"9246:23:18","parameters":{"id":3396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3389,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"9285:5:18","nodeType":"VariableDeclaration","scope":3397,"src":"9270:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3388,"nodeType":"UserDefinedTypeName","pathNode":{"id":3387,"name":"IERC20","nameLocations":["9270:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"9270:6:18"},"referencedDeclaration":3159,"src":"9270:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3391,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"9308:6:18","nodeType":"VariableDeclaration","scope":3397,"src":"9292:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3390,"name":"address","nodeType":"ElementaryTypeName","src":"9292:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3393,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"9324:9:18","nodeType":"VariableDeclaration","scope":3397,"src":"9316:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3392,"name":"address","nodeType":"ElementaryTypeName","src":"9316:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3395,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"9343:6:18","nodeType":"VariableDeclaration","scope":3397,"src":"9335:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3394,"name":"uint256","nodeType":"ElementaryTypeName","src":"9335:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9269:81:18"}},{"id":3401,"nodeType":"EnumDefinition","src":"10431:65:18","nodes":[],"canonicalName":"IVault.PoolSpecialization","members":[{"id":3398,"name":"GENERAL","nameLocation":"10457:7:18","nodeType":"EnumValue","src":"10457:7:18"},{"id":3399,"name":"MINIMAL_SWAP_INFO","nameLocation":"10466:17:18","nodeType":"EnumValue","src":"10466:17:18"},{"id":3400,"name":"TWO_TOKEN","nameLocation":"10485:9:18","nodeType":"EnumValue","src":"10485:9:18"}],"name":"PoolSpecialization","nameLocation":"10436:18:18"},{"id":3410,"nodeType":"FunctionDefinition","src":"11209:84:18","nodes":[],"documentation":{"id":3402,"nodeType":"StructuredDocumentation","src":"10502:702:18","text":" @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n changed.\n The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n depending on the chosen specialization setting. This contract is known as the Pool's contract.\n Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n multiple Pools may share the same contract.\n Emits a `PoolRegistered` event."},"functionSelector":"09b2760f","implemented":false,"kind":"function","modifiers":[],"name":"registerPool","nameLocation":"11218:12:18","parameters":{"id":3406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"mutability":"mutable","name":"specialization","nameLocation":"11250:14:18","nodeType":"VariableDeclaration","scope":3410,"src":"11231:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$3401","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":3404,"nodeType":"UserDefinedTypeName","pathNode":{"id":3403,"name":"PoolSpecialization","nameLocations":["11231:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":3401,"src":"11231:18:18"},"referencedDeclaration":3401,"src":"11231:18:18","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$3401","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11230:35:18"},"returnParameters":{"id":3409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3410,"src":"11284:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11284:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11283:9:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3420,"nodeType":"EventDefinition","src":"11388:109:18","nodes":[],"anonymous":false,"documentation":{"id":3411,"nodeType":"StructuredDocumentation","src":"11299:84:18","text":" @dev Emitted when a Pool is registered by calling `registerPool`."},"eventSelector":"3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e","name":"PoolRegistered","nameLocation":"11394:14:18","parameters":{"id":3419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3413,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"11425:6:18","nodeType":"VariableDeclaration","scope":3420,"src":"11409:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11409:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3415,"indexed":true,"mutability":"mutable","name":"poolAddress","nameLocation":"11449:11:18","nodeType":"VariableDeclaration","scope":3420,"src":"11433:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3414,"name":"address","nodeType":"ElementaryTypeName","src":"11433:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3418,"indexed":false,"mutability":"mutable","name":"specialization","nameLocation":"11481:14:18","nodeType":"VariableDeclaration","scope":3420,"src":"11462:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$3401","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":3417,"nodeType":"UserDefinedTypeName","pathNode":{"id":3416,"name":"PoolSpecialization","nameLocations":["11462:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":3401,"src":"11462:18:18"},"referencedDeclaration":3401,"src":"11462:18:18","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$3401","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11408:88:18"}},{"id":3431,"nodeType":"FunctionDefinition","src":"11593:85:18","nodes":[],"documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"11503:85:18","text":" @dev Returns a Pool's contract address and specialization setting."},"functionSelector":"f6c00927","implemented":false,"kind":"function","modifiers":[],"name":"getPool","nameLocation":"11602:7:18","parameters":{"id":3424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3423,"mutability":"mutable","name":"poolId","nameLocation":"11618:6:18","nodeType":"VariableDeclaration","scope":3431,"src":"11610:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3422,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11610:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11609:16:18"},"returnParameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3431,"src":"11649:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3425,"name":"address","nodeType":"ElementaryTypeName","src":"11649:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3431,"src":"11658:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$3401","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":3428,"nodeType":"UserDefinedTypeName","pathNode":{"id":3427,"name":"PoolSpecialization","nameLocations":["11658:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":3401,"src":"11658:18:18"},"referencedDeclaration":3401,"src":"11658:18:18","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$3401","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11648:29:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3444,"nodeType":"FunctionDefinition","src":"13111:135:18","nodes":[],"documentation":{"id":3432,"nodeType":"StructuredDocumentation","src":"11684:1422:18","text":" @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n exit by receiving registered tokens, and can only swap registered tokens.\n Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n ascending order.\n The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n expected to be highly secured smart contracts with sound design principles, and the decision to register an\n Asset Manager should not be made lightly.\n Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n different Asset Manager.\n Emits a `TokensRegistered` event."},"functionSelector":"66a9c7d2","implemented":false,"kind":"function","modifiers":[],"name":"registerTokens","nameLocation":"13120:14:18","parameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3434,"mutability":"mutable","name":"poolId","nameLocation":"13152:6:18","nodeType":"VariableDeclaration","scope":3444,"src":"13144:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3433,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13144:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3438,"mutability":"mutable","name":"tokens","nameLocation":"13184:6:18","nodeType":"VariableDeclaration","scope":3444,"src":"13168:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3436,"nodeType":"UserDefinedTypeName","pathNode":{"id":3435,"name":"IERC20","nameLocations":["13168:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"13168:6:18"},"referencedDeclaration":3159,"src":"13168:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3437,"nodeType":"ArrayTypeName","src":"13168:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":3441,"mutability":"mutable","name":"assetManagers","nameLocation":"13217:13:18","nodeType":"VariableDeclaration","scope":3444,"src":"13200:30:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3439,"name":"address","nodeType":"ElementaryTypeName","src":"13200:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3440,"nodeType":"ArrayTypeName","src":"13200:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"13134:102:18"},"returnParameters":{"id":3443,"nodeType":"ParameterList","parameters":[],"src":"13245:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3456,"nodeType":"EventDefinition","src":"13346:89:18","nodes":[],"anonymous":false,"documentation":{"id":3445,"nodeType":"StructuredDocumentation","src":"13252:89:18","text":" @dev Emitted when a Pool registers tokens by calling `registerTokens`."},"eventSelector":"f5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec4","name":"TokensRegistered","nameLocation":"13352:16:18","parameters":{"id":3455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"13385:6:18","nodeType":"VariableDeclaration","scope":3456,"src":"13369:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13369:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3451,"indexed":false,"mutability":"mutable","name":"tokens","nameLocation":"13402:6:18","nodeType":"VariableDeclaration","scope":3456,"src":"13393:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3449,"nodeType":"UserDefinedTypeName","pathNode":{"id":3448,"name":"IERC20","nameLocations":["13393:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"13393:6:18"},"referencedDeclaration":3159,"src":"13393:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3450,"nodeType":"ArrayTypeName","src":"13393:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":3454,"indexed":false,"mutability":"mutable","name":"assetManagers","nameLocation":"13420:13:18","nodeType":"VariableDeclaration","scope":3456,"src":"13410:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3452,"name":"address","nodeType":"ElementaryTypeName","src":"13410:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3453,"nodeType":"ArrayTypeName","src":"13410:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"13368:66:18"}},{"id":3466,"nodeType":"FunctionDefinition","src":"14013:75:18","nodes":[],"documentation":{"id":3457,"nodeType":"StructuredDocumentation","src":"13441:567:18","text":" @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n must be deregistered in the same `deregisterTokens` call.\n A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n Emits a `TokensDeregistered` event."},"functionSelector":"7d3aeb96","implemented":false,"kind":"function","modifiers":[],"name":"deregisterTokens","nameLocation":"14022:16:18","parameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3459,"mutability":"mutable","name":"poolId","nameLocation":"14047:6:18","nodeType":"VariableDeclaration","scope":3466,"src":"14039:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14039:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3463,"mutability":"mutable","name":"tokens","nameLocation":"14071:6:18","nodeType":"VariableDeclaration","scope":3466,"src":"14055:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3461,"nodeType":"UserDefinedTypeName","pathNode":{"id":3460,"name":"IERC20","nameLocations":["14055:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"14055:6:18"},"referencedDeclaration":3159,"src":"14055:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3462,"nodeType":"ArrayTypeName","src":"14055:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"14038:40:18"},"returnParameters":{"id":3465,"nodeType":"ParameterList","parameters":[],"src":"14087:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3475,"nodeType":"EventDefinition","src":"14192:66:18","nodes":[],"anonymous":false,"documentation":{"id":3467,"nodeType":"StructuredDocumentation","src":"14094:93:18","text":" @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`."},"eventSelector":"7dcdc6d02ef40c7c1a7046a011b058bd7f988fa14e20a66344f9d4e60657d610","name":"TokensDeregistered","nameLocation":"14198:18:18","parameters":{"id":3474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3469,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"14233:6:18","nodeType":"VariableDeclaration","scope":3475,"src":"14217:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3468,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14217:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3473,"indexed":false,"mutability":"mutable","name":"tokens","nameLocation":"14250:6:18","nodeType":"VariableDeclaration","scope":3475,"src":"14241:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3471,"nodeType":"UserDefinedTypeName","pathNode":{"id":3470,"name":"IERC20","nameLocations":["14241:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"14241:6:18"},"referencedDeclaration":3159,"src":"14241:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3472,"nodeType":"ArrayTypeName","src":"14241:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"14216:41:18"}},{"id":3492,"nodeType":"FunctionDefinition","src":"15312:239:18","nodes":[],"documentation":{"id":3476,"nodeType":"StructuredDocumentation","src":"14264:1043:18","text":" @dev Returns detailed information for a Pool's registered token.\n `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n equals the sum of `cash` and `managed`.\n Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n `managed` or `total` balance to be greater than 2^112 - 1.\n `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n change for this purpose, and will update `lastChangeBlock`.\n `assetManager` is the Pool's token Asset Manager."},"functionSelector":"b05f8e48","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"15321:16:18","parameters":{"id":3482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3478,"mutability":"mutable","name":"poolId","nameLocation":"15346:6:18","nodeType":"VariableDeclaration","scope":3492,"src":"15338:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15338:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3481,"mutability":"mutable","name":"token","nameLocation":"15361:5:18","nodeType":"VariableDeclaration","scope":3492,"src":"15354:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3480,"nodeType":"UserDefinedTypeName","pathNode":{"id":3479,"name":"IERC20","nameLocations":["15354:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"15354:6:18"},"referencedDeclaration":3159,"src":"15354:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"15337:30:18"},"returnParameters":{"id":3491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3484,"mutability":"mutable","name":"cash","nameLocation":"15436:4:18","nodeType":"VariableDeclaration","scope":3492,"src":"15428:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3483,"name":"uint256","nodeType":"ElementaryTypeName","src":"15428:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3486,"mutability":"mutable","name":"managed","nameLocation":"15462:7:18","nodeType":"VariableDeclaration","scope":3492,"src":"15454:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3485,"name":"uint256","nodeType":"ElementaryTypeName","src":"15454:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3488,"mutability":"mutable","name":"lastChangeBlock","nameLocation":"15491:15:18","nodeType":"VariableDeclaration","scope":3492,"src":"15483:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3487,"name":"uint256","nodeType":"ElementaryTypeName","src":"15483:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3490,"mutability":"mutable","name":"assetManager","nameLocation":"15528:12:18","nodeType":"VariableDeclaration","scope":3492,"src":"15520:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3489,"name":"address","nodeType":"ElementaryTypeName","src":"15520:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15414:136:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3507,"nodeType":"FunctionDefinition","src":"16390:208:18","nodes":[],"documentation":{"id":3493,"nodeType":"StructuredDocumentation","src":"15557:828:18","text":" @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."},"functionSelector":"f94d4668","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"16399:13:18","parameters":{"id":3496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3495,"mutability":"mutable","name":"poolId","nameLocation":"16421:6:18","nodeType":"VariableDeclaration","scope":3507,"src":"16413:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16413:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16412:16:18"},"returnParameters":{"id":3506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3500,"mutability":"mutable","name":"tokens","nameLocation":"16505:6:18","nodeType":"VariableDeclaration","scope":3507,"src":"16489:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3498,"nodeType":"UserDefinedTypeName","pathNode":{"id":3497,"name":"IERC20","nameLocations":["16489:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"16489:6:18"},"referencedDeclaration":3159,"src":"16489:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3499,"nodeType":"ArrayTypeName","src":"16489:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":3503,"mutability":"mutable","name":"balances","nameLocation":"16542:8:18","nodeType":"VariableDeclaration","scope":3507,"src":"16525:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3501,"name":"uint256","nodeType":"ElementaryTypeName","src":"16525:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3502,"nodeType":"ArrayTypeName","src":"16525:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3505,"mutability":"mutable","name":"lastChangeBlock","nameLocation":"16572:15:18","nodeType":"VariableDeclaration","scope":3507,"src":"16564:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3504,"name":"uint256","nodeType":"ElementaryTypeName","src":"16564:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16475:122:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3520,"nodeType":"FunctionDefinition","src":"18913:156:18","nodes":[],"documentation":{"id":3508,"nodeType":"StructuredDocumentation","src":"16604:2304:18","text":" @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."},"functionSelector":"b95cac28","implemented":false,"kind":"function","modifiers":[],"name":"joinPool","nameLocation":"18922:8:18","parameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"poolId","nameLocation":"18948:6:18","nodeType":"VariableDeclaration","scope":3520,"src":"18940:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18940:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3512,"mutability":"mutable","name":"sender","nameLocation":"18972:6:18","nodeType":"VariableDeclaration","scope":3520,"src":"18964:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3511,"name":"address","nodeType":"ElementaryTypeName","src":"18964:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3514,"mutability":"mutable","name":"recipient","nameLocation":"18996:9:18","nodeType":"VariableDeclaration","scope":3520,"src":"18988:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3513,"name":"address","nodeType":"ElementaryTypeName","src":"18988:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3517,"mutability":"mutable","name":"request","nameLocation":"19038:7:18","nodeType":"VariableDeclaration","scope":3520,"src":"19015:30:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JoinPoolRequest_$3532_memory_ptr","typeString":"struct IVault.JoinPoolRequest"},"typeName":{"id":3516,"nodeType":"UserDefinedTypeName","pathNode":{"id":3515,"name":"JoinPoolRequest","nameLocations":["19015:15:18"],"nodeType":"IdentifierPath","referencedDeclaration":3532,"src":"19015:15:18"},"referencedDeclaration":3532,"src":"19015:15:18","typeDescriptions":{"typeIdentifier":"t_struct$_JoinPoolRequest_$3532_storage_ptr","typeString":"struct IVault.JoinPoolRequest"}},"visibility":"internal"}],"src":"18930:121:18"},"returnParameters":{"id":3519,"nodeType":"ParameterList","parameters":[],"src":"19068:0:18"},"scope":3785,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":3532,"nodeType":"StructDefinition","src":"19075:145:18","nodes":[],"canonicalName":"IVault.JoinPoolRequest","members":[{"constant":false,"id":3524,"mutability":"mutable","name":"assets","nameLocation":"19117:6:18","nodeType":"VariableDeclaration","scope":3532,"src":"19108:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_storage_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":3522,"nodeType":"UserDefinedTypeName","pathNode":{"id":3521,"name":"IAsset","nameLocations":["19108:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3163,"src":"19108:6:18"},"referencedDeclaration":3163,"src":"19108:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"}},"id":3523,"nodeType":"ArrayTypeName","src":"19108:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":3527,"mutability":"mutable","name":"maxAmountsIn","nameLocation":"19143:12:18","nodeType":"VariableDeclaration","scope":3532,"src":"19133:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3525,"name":"uint256","nodeType":"ElementaryTypeName","src":"19133:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3526,"nodeType":"ArrayTypeName","src":"19133:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"userData","nameLocation":"19171:8:18","nodeType":"VariableDeclaration","scope":3532,"src":"19165:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3528,"name":"bytes","nodeType":"ElementaryTypeName","src":"19165:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3531,"mutability":"mutable","name":"fromInternalBalance","nameLocation":"19194:19:18","nodeType":"VariableDeclaration","scope":3532,"src":"19189:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3530,"name":"bool","nodeType":"ElementaryTypeName","src":"19189:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"JoinPoolRequest","nameLocation":"19082:15:18","scope":3785,"visibility":"public"},{"id":3545,"nodeType":"FunctionDefinition","src":"21720:156:18","nodes":[],"documentation":{"id":3533,"nodeType":"StructuredDocumentation","src":"19226:2489:18","text":" @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n `getPoolTokenInfo`).\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n it just enforces these minimums.\n If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n do so will trigger a revert.\n `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n `tokens` array. This array must match the Pool's registered tokens.\n This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n passed directly to the Pool's contract.\n Emits a `PoolBalanceChanged` event."},"functionSelector":"8bdb3913","implemented":false,"kind":"function","modifiers":[],"name":"exitPool","nameLocation":"21729:8:18","parameters":{"id":3543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3535,"mutability":"mutable","name":"poolId","nameLocation":"21755:6:18","nodeType":"VariableDeclaration","scope":3545,"src":"21747:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3534,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21747:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3537,"mutability":"mutable","name":"sender","nameLocation":"21779:6:18","nodeType":"VariableDeclaration","scope":3545,"src":"21771:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3536,"name":"address","nodeType":"ElementaryTypeName","src":"21771:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3539,"mutability":"mutable","name":"recipient","nameLocation":"21811:9:18","nodeType":"VariableDeclaration","scope":3545,"src":"21795:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3538,"name":"address","nodeType":"ElementaryTypeName","src":"21795:15:18","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3542,"mutability":"mutable","name":"request","nameLocation":"21853:7:18","nodeType":"VariableDeclaration","scope":3545,"src":"21830:30:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExitPoolRequest_$3557_memory_ptr","typeString":"struct IVault.ExitPoolRequest"},"typeName":{"id":3541,"nodeType":"UserDefinedTypeName","pathNode":{"id":3540,"name":"ExitPoolRequest","nameLocations":["21830:15:18"],"nodeType":"IdentifierPath","referencedDeclaration":3557,"src":"21830:15:18"},"referencedDeclaration":3557,"src":"21830:15:18","typeDescriptions":{"typeIdentifier":"t_struct$_ExitPoolRequest_$3557_storage_ptr","typeString":"struct IVault.ExitPoolRequest"}},"visibility":"internal"}],"src":"21737:129:18"},"returnParameters":{"id":3544,"nodeType":"ParameterList","parameters":[],"src":"21875:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3557,"nodeType":"StructDefinition","src":"21882:144:18","nodes":[],"canonicalName":"IVault.ExitPoolRequest","members":[{"constant":false,"id":3549,"mutability":"mutable","name":"assets","nameLocation":"21924:6:18","nodeType":"VariableDeclaration","scope":3557,"src":"21915:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_storage_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":3547,"nodeType":"UserDefinedTypeName","pathNode":{"id":3546,"name":"IAsset","nameLocations":["21915:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3163,"src":"21915:6:18"},"referencedDeclaration":3163,"src":"21915:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"}},"id":3548,"nodeType":"ArrayTypeName","src":"21915:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":3552,"mutability":"mutable","name":"minAmountsOut","nameLocation":"21950:13:18","nodeType":"VariableDeclaration","scope":3557,"src":"21940:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3550,"name":"uint256","nodeType":"ElementaryTypeName","src":"21940:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3551,"nodeType":"ArrayTypeName","src":"21940:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3554,"mutability":"mutable","name":"userData","nameLocation":"21979:8:18","nodeType":"VariableDeclaration","scope":3557,"src":"21973:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3553,"name":"bytes","nodeType":"ElementaryTypeName","src":"21973:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3556,"mutability":"mutable","name":"toInternalBalance","nameLocation":"22002:17:18","nodeType":"VariableDeclaration","scope":3557,"src":"21997:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3555,"name":"bool","nodeType":"ElementaryTypeName","src":"21997:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"ExitPoolRequest","nameLocation":"21889:15:18","scope":3785,"visibility":"public"},{"id":3574,"nodeType":"EventDefinition","src":"22153:194:18","nodes":[],"anonymous":false,"documentation":{"id":3558,"nodeType":"StructuredDocumentation","src":"22032:116:18","text":" @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."},"eventSelector":"e5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae78","name":"PoolBalanceChanged","nameLocation":"22159:18:18","parameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3560,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"22203:6:18","nodeType":"VariableDeclaration","scope":3574,"src":"22187:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22187:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3562,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"22235:17:18","nodeType":"VariableDeclaration","scope":3574,"src":"22219:33:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3561,"name":"address","nodeType":"ElementaryTypeName","src":"22219:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3566,"indexed":false,"mutability":"mutable","name":"tokens","nameLocation":"22271:6:18","nodeType":"VariableDeclaration","scope":3574,"src":"22262:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3564,"nodeType":"UserDefinedTypeName","pathNode":{"id":3563,"name":"IERC20","nameLocations":["22262:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"22262:6:18"},"referencedDeclaration":3159,"src":"22262:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3565,"nodeType":"ArrayTypeName","src":"22262:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":3569,"indexed":false,"mutability":"mutable","name":"deltas","nameLocation":"22296:6:18","nodeType":"VariableDeclaration","scope":3574,"src":"22287:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":3567,"name":"int256","nodeType":"ElementaryTypeName","src":"22287:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3568,"nodeType":"ArrayTypeName","src":"22287:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":3572,"indexed":false,"mutability":"mutable","name":"protocolFeeAmounts","nameLocation":"22322:18:18","nodeType":"VariableDeclaration","scope":3574,"src":"22312:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3570,"name":"uint256","nodeType":"ElementaryTypeName","src":"22312:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3571,"nodeType":"ArrayTypeName","src":"22312:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22177:169:18"}},{"id":3577,"nodeType":"EnumDefinition","src":"22353:41:18","nodes":[],"canonicalName":"IVault.PoolBalanceChangeKind","members":[{"id":3575,"name":"JOIN","nameLocation":"22382:4:18","nodeType":"EnumValue","src":"22382:4:18"},{"id":3576,"name":"EXIT","nameLocation":"22388:4:18","nodeType":"EnumValue","src":"22388:4:18"}],"name":"PoolBalanceChangeKind","nameLocation":"22358:21:18"},{"id":3580,"nodeType":"EnumDefinition","src":"25979:37:18","nodes":[],"canonicalName":"IVault.SwapKind","members":[{"id":3578,"name":"GIVEN_IN","nameLocation":"25995:8:18","nodeType":"EnumValue","src":"25995:8:18"},{"id":3579,"name":"GIVEN_OUT","nameLocation":"26005:9:18","nodeType":"EnumValue","src":"26005:9:18"}],"name":"SwapKind","nameLocation":"25984:8:18"},{"id":3596,"nodeType":"FunctionDefinition","src":"26614:179:18","nodes":[],"documentation":{"id":3581,"nodeType":"StructuredDocumentation","src":"26022:587:18","text":" @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."},"functionSelector":"52bbbe29","implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"26623:4:18","parameters":{"id":3592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3584,"mutability":"mutable","name":"singleSwap","nameLocation":"26655:10:18","nodeType":"VariableDeclaration","scope":3596,"src":"26637:28:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SingleSwap_$3613_memory_ptr","typeString":"struct IVault.SingleSwap"},"typeName":{"id":3583,"nodeType":"UserDefinedTypeName","pathNode":{"id":3582,"name":"SingleSwap","nameLocations":["26637:10:18"],"nodeType":"IdentifierPath","referencedDeclaration":3613,"src":"26637:10:18"},"referencedDeclaration":3613,"src":"26637:10:18","typeDescriptions":{"typeIdentifier":"t_struct$_SingleSwap_$3613_storage_ptr","typeString":"struct IVault.SingleSwap"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"funds","nameLocation":"26697:5:18","nodeType":"VariableDeclaration","scope":3596,"src":"26675:27:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$3676_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":3586,"nodeType":"UserDefinedTypeName","pathNode":{"id":3585,"name":"FundManagement","nameLocations":["26675:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":3676,"src":"26675:14:18"},"referencedDeclaration":3676,"src":"26675:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$3676_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"},{"constant":false,"id":3589,"mutability":"mutable","name":"limit","nameLocation":"26720:5:18","nodeType":"VariableDeclaration","scope":3596,"src":"26712:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3588,"name":"uint256","nodeType":"ElementaryTypeName","src":"26712:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3591,"mutability":"mutable","name":"deadline","nameLocation":"26743:8:18","nodeType":"VariableDeclaration","scope":3596,"src":"26735:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3590,"name":"uint256","nodeType":"ElementaryTypeName","src":"26735:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26627:130:18"},"returnParameters":{"id":3595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3596,"src":"26784:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3593,"name":"uint256","nodeType":"ElementaryTypeName","src":"26784:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26783:9:18"},"scope":3785,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":3613,"nodeType":"StructDefinition","src":"27349:169:18","nodes":[],"canonicalName":"IVault.SingleSwap","documentation":{"id":3597,"nodeType":"StructuredDocumentation","src":"26799:545:18","text":" @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n the `kind` value.\n `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n used to extend swap behavior."},"members":[{"constant":false,"id":3599,"mutability":"mutable","name":"poolId","nameLocation":"27385:6:18","nodeType":"VariableDeclaration","scope":3613,"src":"27377:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"27377:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3602,"mutability":"mutable","name":"kind","nameLocation":"27410:4:18","nodeType":"VariableDeclaration","scope":3613,"src":"27401:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3580","typeString":"enum IVault.SwapKind"},"typeName":{"id":3601,"nodeType":"UserDefinedTypeName","pathNode":{"id":3600,"name":"SwapKind","nameLocations":["27401:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3580,"src":"27401:8:18"},"referencedDeclaration":3580,"src":"27401:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3580","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":3605,"mutability":"mutable","name":"assetIn","nameLocation":"27431:7:18","nodeType":"VariableDeclaration","scope":3613,"src":"27424:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"},"typeName":{"id":3604,"nodeType":"UserDefinedTypeName","pathNode":{"id":3603,"name":"IAsset","nameLocations":["27424:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3163,"src":"27424:6:18"},"referencedDeclaration":3163,"src":"27424:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":3608,"mutability":"mutable","name":"assetOut","nameLocation":"27455:8:18","nodeType":"VariableDeclaration","scope":3613,"src":"27448:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"},"typeName":{"id":3607,"nodeType":"UserDefinedTypeName","pathNode":{"id":3606,"name":"IAsset","nameLocations":["27448:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3163,"src":"27448:6:18"},"referencedDeclaration":3163,"src":"27448:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"amount","nameLocation":"27481:6:18","nodeType":"VariableDeclaration","scope":3613,"src":"27473:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3609,"name":"uint256","nodeType":"ElementaryTypeName","src":"27473:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"userData","nameLocation":"27503:8:18","nodeType":"VariableDeclaration","scope":3613,"src":"27497:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3611,"name":"bytes","nodeType":"ElementaryTypeName","src":"27497:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SingleSwap","nameLocation":"27356:10:18","scope":3785,"visibility":"public"},{"id":3639,"nodeType":"FunctionDefinition","src":"29509:256:18","nodes":[],"documentation":{"id":3614,"nodeType":"StructuredDocumentation","src":"27524:1980:18","text":" @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."},"functionSelector":"945bcec9","implemented":false,"kind":"function","modifiers":[],"name":"batchSwap","nameLocation":"29518:9:18","parameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3617,"mutability":"mutable","name":"kind","nameLocation":"29546:4:18","nodeType":"VariableDeclaration","scope":3639,"src":"29537:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3580","typeString":"enum IVault.SwapKind"},"typeName":{"id":3616,"nodeType":"UserDefinedTypeName","pathNode":{"id":3615,"name":"SwapKind","nameLocations":["29537:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3580,"src":"29537:8:18"},"referencedDeclaration":3580,"src":"29537:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3580","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":3621,"mutability":"mutable","name":"swaps","nameLocation":"29583:5:18","nodeType":"VariableDeclaration","scope":3639,"src":"29560:28:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$3651_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.BatchSwapStep[]"},"typeName":{"baseType":{"id":3619,"nodeType":"UserDefinedTypeName","pathNode":{"id":3618,"name":"BatchSwapStep","nameLocations":["29560:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3651,"src":"29560:13:18"},"referencedDeclaration":3651,"src":"29560:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_BatchSwapStep_$3651_storage_ptr","typeString":"struct IVault.BatchSwapStep"}},"id":3620,"nodeType":"ArrayTypeName","src":"29560:15:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$3651_storage_$dyn_storage_ptr","typeString":"struct IVault.BatchSwapStep[]"}},"visibility":"internal"},{"constant":false,"id":3625,"mutability":"mutable","name":"assets","nameLocation":"29614:6:18","nodeType":"VariableDeclaration","scope":3639,"src":"29598:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_memory_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":3623,"nodeType":"UserDefinedTypeName","pathNode":{"id":3622,"name":"IAsset","nameLocations":["29598:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3163,"src":"29598:6:18"},"referencedDeclaration":3163,"src":"29598:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"}},"id":3624,"nodeType":"ArrayTypeName","src":"29598:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":3628,"mutability":"mutable","name":"funds","nameLocation":"29652:5:18","nodeType":"VariableDeclaration","scope":3639,"src":"29630:27:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$3676_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":3627,"nodeType":"UserDefinedTypeName","pathNode":{"id":3626,"name":"FundManagement","nameLocations":["29630:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":3676,"src":"29630:14:18"},"referencedDeclaration":3676,"src":"29630:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$3676_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"},{"constant":false,"id":3631,"mutability":"mutable","name":"limits","nameLocation":"29683:6:18","nodeType":"VariableDeclaration","scope":3639,"src":"29667:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":3629,"name":"int256","nodeType":"ElementaryTypeName","src":"29667:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3630,"nodeType":"ArrayTypeName","src":"29667:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":3633,"mutability":"mutable","name":"deadline","nameLocation":"29707:8:18","nodeType":"VariableDeclaration","scope":3639,"src":"29699:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3632,"name":"uint256","nodeType":"ElementaryTypeName","src":"29699:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29527:194:18"},"returnParameters":{"id":3638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3639,"src":"29748:15:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":3635,"name":"int256","nodeType":"ElementaryTypeName","src":"29748:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3636,"nodeType":"ArrayTypeName","src":"29748:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"29747:17:18"},"scope":3785,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":3651,"nodeType":"StructDefinition","src":"30327:161:18","nodes":[],"canonicalName":"IVault.BatchSwapStep","documentation":{"id":3640,"nodeType":"StructuredDocumentation","src":"29771:551:18","text":" @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n `assets` array passed to that function, and ETH assets are converted to WETH.\n If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n from the previous swap, depending on the swap kind.\n The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n used to extend swap behavior."},"members":[{"constant":false,"id":3642,"mutability":"mutable","name":"poolId","nameLocation":"30366:6:18","nodeType":"VariableDeclaration","scope":3651,"src":"30358:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3641,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30358:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3644,"mutability":"mutable","name":"assetInIndex","nameLocation":"30390:12:18","nodeType":"VariableDeclaration","scope":3651,"src":"30382:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3643,"name":"uint256","nodeType":"ElementaryTypeName","src":"30382:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3646,"mutability":"mutable","name":"assetOutIndex","nameLocation":"30420:13:18","nodeType":"VariableDeclaration","scope":3651,"src":"30412:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3645,"name":"uint256","nodeType":"ElementaryTypeName","src":"30412:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3648,"mutability":"mutable","name":"amount","nameLocation":"30451:6:18","nodeType":"VariableDeclaration","scope":3651,"src":"30443:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3647,"name":"uint256","nodeType":"ElementaryTypeName","src":"30443:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3650,"mutability":"mutable","name":"userData","nameLocation":"30473:8:18","nodeType":"VariableDeclaration","scope":3651,"src":"30467:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3649,"name":"bytes","nodeType":"ElementaryTypeName","src":"30467:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BatchSwapStep","nameLocation":"30334:13:18","scope":3785,"visibility":"public"},{"id":3666,"nodeType":"EventDefinition","src":"30591:167:18","nodes":[],"anonymous":false,"documentation":{"id":3652,"nodeType":"StructuredDocumentation","src":"30494:92:18","text":" @dev Emitted for each individual swap performed by `swap` or `batchSwap`."},"eventSelector":"2170c741c41531aec20e7c107c24eecfdd15e69c9bb0a8dd37b1840b9e0b207b","name":"Swap","nameLocation":"30597:4:18","parameters":{"id":3665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3654,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"30627:6:18","nodeType":"VariableDeclaration","scope":3666,"src":"30611:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30611:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3657,"indexed":true,"mutability":"mutable","name":"tokenIn","nameLocation":"30658:7:18","nodeType":"VariableDeclaration","scope":3666,"src":"30643:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3656,"nodeType":"UserDefinedTypeName","pathNode":{"id":3655,"name":"IERC20","nameLocations":["30643:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"30643:6:18"},"referencedDeclaration":3159,"src":"30643:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3660,"indexed":true,"mutability":"mutable","name":"tokenOut","nameLocation":"30690:8:18","nodeType":"VariableDeclaration","scope":3666,"src":"30675:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3659,"nodeType":"UserDefinedTypeName","pathNode":{"id":3658,"name":"IERC20","nameLocations":["30675:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"30675:6:18"},"referencedDeclaration":3159,"src":"30675:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3662,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"30716:8:18","nodeType":"VariableDeclaration","scope":3666,"src":"30708:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3661,"name":"uint256","nodeType":"ElementaryTypeName","src":"30708:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3664,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"30742:9:18","nodeType":"VariableDeclaration","scope":3666,"src":"30734:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3663,"name":"uint256","nodeType":"ElementaryTypeName","src":"30734:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30601:156:18"}},{"id":3676,"nodeType":"StructDefinition","src":"31689:154:18","nodes":[],"canonicalName":"IVault.FundManagement","documentation":{"id":3667,"nodeType":"StructuredDocumentation","src":"30764:920:18","text":" @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n `recipient` account.\n If the caller is not `sender`, it must be an authorized relayer for them.\n If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n `joinPool`.\n If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n transferred. This matches the behavior of `exitPool`.\n Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n revert."},"members":[{"constant":false,"id":3669,"mutability":"mutable","name":"sender","nameLocation":"31729:6:18","nodeType":"VariableDeclaration","scope":3676,"src":"31721:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3668,"name":"address","nodeType":"ElementaryTypeName","src":"31721:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3671,"mutability":"mutable","name":"fromInternalBalance","nameLocation":"31750:19:18","nodeType":"VariableDeclaration","scope":3676,"src":"31745:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3670,"name":"bool","nodeType":"ElementaryTypeName","src":"31745:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3673,"mutability":"mutable","name":"recipient","nameLocation":"31795:9:18","nodeType":"VariableDeclaration","scope":3676,"src":"31779:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3672,"name":"address","nodeType":"ElementaryTypeName","src":"31779:15:18","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3675,"mutability":"mutable","name":"toInternalBalance","nameLocation":"31819:17:18","nodeType":"VariableDeclaration","scope":3676,"src":"31814:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3674,"name":"bool","nodeType":"ElementaryTypeName","src":"31814:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"FundManagement","nameLocation":"31696:14:18","scope":3785,"visibility":"public"},{"id":3697,"nodeType":"FunctionDefinition","src":"32881:207:18","nodes":[],"documentation":{"id":3677,"nodeType":"StructuredDocumentation","src":"31849:1027:18","text":" @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n receives are the same that an equivalent `batchSwap` call would receive.\n Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n approve them for the Vault, or even know a user's address.\n Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n eth_call instead of eth_sendTransaction."},"functionSelector":"f84d066e","implemented":false,"kind":"function","modifiers":[],"name":"queryBatchSwap","nameLocation":"32890:14:18","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3680,"mutability":"mutable","name":"kind","nameLocation":"32923:4:18","nodeType":"VariableDeclaration","scope":3697,"src":"32914:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3580","typeString":"enum IVault.SwapKind"},"typeName":{"id":3679,"nodeType":"UserDefinedTypeName","pathNode":{"id":3678,"name":"SwapKind","nameLocations":["32914:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3580,"src":"32914:8:18"},"referencedDeclaration":3580,"src":"32914:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$3580","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":3684,"mutability":"mutable","name":"swaps","nameLocation":"32960:5:18","nodeType":"VariableDeclaration","scope":3697,"src":"32937:28:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$3651_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.BatchSwapStep[]"},"typeName":{"baseType":{"id":3682,"nodeType":"UserDefinedTypeName","pathNode":{"id":3681,"name":"BatchSwapStep","nameLocations":["32937:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3651,"src":"32937:13:18"},"referencedDeclaration":3651,"src":"32937:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_BatchSwapStep_$3651_storage_ptr","typeString":"struct IVault.BatchSwapStep"}},"id":3683,"nodeType":"ArrayTypeName","src":"32937:15:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$3651_storage_$dyn_storage_ptr","typeString":"struct IVault.BatchSwapStep[]"}},"visibility":"internal"},{"constant":false,"id":3688,"mutability":"mutable","name":"assets","nameLocation":"32991:6:18","nodeType":"VariableDeclaration","scope":3697,"src":"32975:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_memory_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":3686,"nodeType":"UserDefinedTypeName","pathNode":{"id":3685,"name":"IAsset","nameLocations":["32975:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3163,"src":"32975:6:18"},"referencedDeclaration":3163,"src":"32975:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$3163","typeString":"contract IAsset"}},"id":3687,"nodeType":"ArrayTypeName","src":"32975:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$3163_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":3691,"mutability":"mutable","name":"funds","nameLocation":"33029:5:18","nodeType":"VariableDeclaration","scope":3697,"src":"33007:27:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$3676_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":3690,"nodeType":"UserDefinedTypeName","pathNode":{"id":3689,"name":"FundManagement","nameLocations":["33007:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":3676,"src":"33007:14:18"},"referencedDeclaration":3676,"src":"33007:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$3676_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"}],"src":"32904:136:18"},"returnParameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3695,"mutability":"mutable","name":"assetDeltas","nameLocation":"33075:11:18","nodeType":"VariableDeclaration","scope":3697,"src":"33059:27:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":3693,"name":"int256","nodeType":"ElementaryTypeName","src":"33059:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3694,"nodeType":"ArrayTypeName","src":"33059:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"33058:29:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3713,"nodeType":"FunctionDefinition","src":"33723:170:18","nodes":[],"documentation":{"id":3698,"nodeType":"StructuredDocumentation","src":"33114:604:18","text":" @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n and then reverting unless the tokens plus a proportional protocol fee have been returned.\n The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n for each token contract. `tokens` must be sorted in ascending order.\n The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n `receiveFlashLoan` call.\n Emits `FlashLoan` events."},"functionSelector":"5c38449e","implemented":false,"kind":"function","modifiers":[],"name":"flashLoan","nameLocation":"33732:9:18","parameters":{"id":3711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3701,"mutability":"mutable","name":"recipient","nameLocation":"33771:9:18","nodeType":"VariableDeclaration","scope":3713,"src":"33751:29:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$3198","typeString":"contract IFlashLoanRecipient"},"typeName":{"id":3700,"nodeType":"UserDefinedTypeName","pathNode":{"id":3699,"name":"IFlashLoanRecipient","nameLocations":["33751:19:18"],"nodeType":"IdentifierPath","referencedDeclaration":3198,"src":"33751:19:18"},"referencedDeclaration":3198,"src":"33751:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$3198","typeString":"contract IFlashLoanRecipient"}},"visibility":"internal"},{"constant":false,"id":3705,"mutability":"mutable","name":"tokens","nameLocation":"33806:6:18","nodeType":"VariableDeclaration","scope":3713,"src":"33790:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3703,"nodeType":"UserDefinedTypeName","pathNode":{"id":3702,"name":"IERC20","nameLocations":["33790:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"33790:6:18"},"referencedDeclaration":3159,"src":"33790:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"id":3704,"nodeType":"ArrayTypeName","src":"33790:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3159_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":3708,"mutability":"mutable","name":"amounts","nameLocation":"33839:7:18","nodeType":"VariableDeclaration","scope":3713,"src":"33822:24:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3706,"name":"uint256","nodeType":"ElementaryTypeName","src":"33822:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3707,"nodeType":"ArrayTypeName","src":"33822:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3710,"mutability":"mutable","name":"userData","nameLocation":"33869:8:18","nodeType":"VariableDeclaration","scope":3713,"src":"33856:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3709,"name":"bytes","nodeType":"ElementaryTypeName","src":"33856:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"33741:142:18"},"returnParameters":{"id":3712,"nodeType":"ParameterList","parameters":[],"src":"33892:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3726,"nodeType":"EventDefinition","src":"33992:112:18","nodes":[],"anonymous":false,"documentation":{"id":3714,"nodeType":"StructuredDocumentation","src":"33899:88:18","text":" @dev Emitted for each individual flash loan performed by `flashLoan`."},"eventSelector":"0d7d75e01ab95780d3cd1c8ec0dd6c2ce19e3a20427eec8bf53283b6fb8e95f0","name":"FlashLoan","nameLocation":"33998:9:18","parameters":{"id":3725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3717,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"34036:9:18","nodeType":"VariableDeclaration","scope":3726,"src":"34008:37:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$3198","typeString":"contract IFlashLoanRecipient"},"typeName":{"id":3716,"nodeType":"UserDefinedTypeName","pathNode":{"id":3715,"name":"IFlashLoanRecipient","nameLocations":["34008:19:18"],"nodeType":"IdentifierPath","referencedDeclaration":3198,"src":"34008:19:18"},"referencedDeclaration":3198,"src":"34008:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$3198","typeString":"contract IFlashLoanRecipient"}},"visibility":"internal"},{"constant":false,"id":3720,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"34062:5:18","nodeType":"VariableDeclaration","scope":3726,"src":"34047:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3719,"nodeType":"UserDefinedTypeName","pathNode":{"id":3718,"name":"IERC20","nameLocations":["34047:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"34047:6:18"},"referencedDeclaration":3159,"src":"34047:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3722,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"34077:6:18","nodeType":"VariableDeclaration","scope":3726,"src":"34069:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3721,"name":"uint256","nodeType":"ElementaryTypeName","src":"34069:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3724,"indexed":false,"mutability":"mutable","name":"feeAmount","nameLocation":"34093:9:18","nodeType":"VariableDeclaration","scope":3726,"src":"34085:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3723,"name":"uint256","nodeType":"ElementaryTypeName","src":"34085:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34007:96:18"}},{"id":3734,"nodeType":"FunctionDefinition","src":"35539:64:18","nodes":[],"documentation":{"id":3727,"nodeType":"StructuredDocumentation","src":"35100:434:18","text":" @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n Pool Balance management features batching, which means a single contract call can be used to perform multiple\n operations of different kinds, with different Pools and tokens, at once.\n For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."},"functionSelector":"e6c46092","implemented":false,"kind":"function","modifiers":[],"name":"managePoolBalance","nameLocation":"35548:17:18","parameters":{"id":3732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3731,"mutability":"mutable","name":"ops","nameLocation":"35589:3:18","nodeType":"VariableDeclaration","scope":3734,"src":"35566:26:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PoolBalanceOp_$3745_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.PoolBalanceOp[]"},"typeName":{"baseType":{"id":3729,"nodeType":"UserDefinedTypeName","pathNode":{"id":3728,"name":"PoolBalanceOp","nameLocations":["35566:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3745,"src":"35566:13:18"},"referencedDeclaration":3745,"src":"35566:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_PoolBalanceOp_$3745_storage_ptr","typeString":"struct IVault.PoolBalanceOp"}},"id":3730,"nodeType":"ArrayTypeName","src":"35566:15:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PoolBalanceOp_$3745_storage_$dyn_storage_ptr","typeString":"struct IVault.PoolBalanceOp[]"}},"visibility":"internal"}],"src":"35565:28:18"},"returnParameters":{"id":3733,"nodeType":"ParameterList","parameters":[],"src":"35602:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3745,"nodeType":"StructDefinition","src":"35609:130:18","nodes":[],"canonicalName":"IVault.PoolBalanceOp","members":[{"constant":false,"id":3737,"mutability":"mutable","name":"kind","nameLocation":"35658:4:18","nodeType":"VariableDeclaration","scope":3745,"src":"35640:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolBalanceOpKind_$3750","typeString":"enum IVault.PoolBalanceOpKind"},"typeName":{"id":3736,"nodeType":"UserDefinedTypeName","pathNode":{"id":3735,"name":"PoolBalanceOpKind","nameLocations":["35640:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":3750,"src":"35640:17:18"},"referencedDeclaration":3750,"src":"35640:17:18","typeDescriptions":{"typeIdentifier":"t_enum$_PoolBalanceOpKind_$3750","typeString":"enum IVault.PoolBalanceOpKind"}},"visibility":"internal"},{"constant":false,"id":3739,"mutability":"mutable","name":"poolId","nameLocation":"35680:6:18","nodeType":"VariableDeclaration","scope":3745,"src":"35672:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3738,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35672:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3742,"mutability":"mutable","name":"token","nameLocation":"35703:5:18","nodeType":"VariableDeclaration","scope":3745,"src":"35696:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3741,"nodeType":"UserDefinedTypeName","pathNode":{"id":3740,"name":"IERC20","nameLocations":["35696:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"35696:6:18"},"referencedDeclaration":3159,"src":"35696:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3744,"mutability":"mutable","name":"amount","nameLocation":"35726:6:18","nodeType":"VariableDeclaration","scope":3745,"src":"35718:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3743,"name":"uint256","nodeType":"ElementaryTypeName","src":"35718:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PoolBalanceOp","nameLocation":"35616:13:18","scope":3785,"visibility":"public"},{"id":3750,"nodeType":"EnumDefinition","src":"36236:52:18","nodes":[],"canonicalName":"IVault.PoolBalanceOpKind","documentation":{"id":3746,"nodeType":"StructuredDocumentation","src":"35745:486:18","text":" Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss)."},"members":[{"id":3747,"name":"WITHDRAW","nameLocation":"36261:8:18","nodeType":"EnumValue","src":"36261:8:18"},{"id":3748,"name":"DEPOSIT","nameLocation":"36271:7:18","nodeType":"EnumValue","src":"36271:7:18"},{"id":3749,"name":"UPDATE","nameLocation":"36280:6:18","nodeType":"EnumValue","src":"36280:6:18"}],"name":"PoolBalanceOpKind","nameLocation":"36241:17:18"},{"id":3764,"nodeType":"EventDefinition","src":"36408:186:18","nodes":[],"anonymous":false,"documentation":{"id":3751,"nodeType":"StructuredDocumentation","src":"36294:109:18","text":" @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."},"eventSelector":"6edcaf6241105b4c94c2efdbf3a6b12458eb3d07be3a0e81d24b13c44045fe7a","name":"PoolBalanceManaged","nameLocation":"36414:18:18","parameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3753,"indexed":true,"mutability":"mutable","name":"poolId","nameLocation":"36458:6:18","nodeType":"VariableDeclaration","scope":3764,"src":"36442:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36442:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3755,"indexed":true,"mutability":"mutable","name":"assetManager","nameLocation":"36490:12:18","nodeType":"VariableDeclaration","scope":3764,"src":"36474:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3754,"name":"address","nodeType":"ElementaryTypeName","src":"36474:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3758,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"36527:5:18","nodeType":"VariableDeclaration","scope":3764,"src":"36512:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"},"typeName":{"id":3757,"nodeType":"UserDefinedTypeName","pathNode":{"id":3756,"name":"IERC20","nameLocations":["36512:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":3159,"src":"36512:6:18"},"referencedDeclaration":3159,"src":"36512:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3159","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3760,"indexed":false,"mutability":"mutable","name":"cashDelta","nameLocation":"36549:9:18","nodeType":"VariableDeclaration","scope":3764,"src":"36542:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3759,"name":"int256","nodeType":"ElementaryTypeName","src":"36542:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3762,"indexed":false,"mutability":"mutable","name":"managedDelta","nameLocation":"36575:12:18","nodeType":"VariableDeclaration","scope":3764,"src":"36568:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3761,"name":"int256","nodeType":"ElementaryTypeName","src":"36568:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"36432:161:18"}},{"id":3771,"nodeType":"FunctionDefinition","src":"37540:83:18","nodes":[],"documentation":{"id":3765,"nodeType":"StructuredDocumentation","src":"37471:64:18","text":" @dev Returns the current protocol fee module."},"functionSelector":"d2946c2b","implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeesCollector","nameLocation":"37549:24:18","parameters":{"id":3766,"nodeType":"ParameterList","parameters":[],"src":"37573:2:18"},"returnParameters":{"id":3770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3771,"src":"37599:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeesCollector_$3267","typeString":"contract IProtocolFeesCollector"},"typeName":{"id":3768,"nodeType":"UserDefinedTypeName","pathNode":{"id":3767,"name":"IProtocolFeesCollector","nameLocations":["37599:22:18"],"nodeType":"IdentifierPath","referencedDeclaration":3267,"src":"37599:22:18"},"referencedDeclaration":3267,"src":"37599:22:18","typeDescriptions":{"typeIdentifier":"t_contract$_IProtocolFeesCollector_$3267","typeString":"contract IProtocolFeesCollector"}},"visibility":"internal"}],"src":"37598:24:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3777,"nodeType":"FunctionDefinition","src":"38269:41:18","nodes":[],"documentation":{"id":3772,"nodeType":"StructuredDocumentation","src":"37629:635:18","text":" @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n error in some part of the system.\n The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n While the contract is paused, the following features are disabled:\n - depositing and transferring internal balance\n - transferring external balance (using the Vault's allowance)\n - swaps\n - joining Pools\n - Asset Manager interactions\n Internal Balance can still be withdrawn, and Pools exited."},"functionSelector":"16c38b3c","implemented":false,"kind":"function","modifiers":[],"name":"setPaused","nameLocation":"38278:9:18","parameters":{"id":3775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3774,"mutability":"mutable","name":"paused","nameLocation":"38293:6:18","nodeType":"VariableDeclaration","scope":3777,"src":"38288:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3773,"name":"bool","nodeType":"ElementaryTypeName","src":"38288:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"38287:13:18"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[],"src":"38309:0:18"},"scope":3785,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3784,"nodeType":"FunctionDefinition","src":"38379:46:18","nodes":[],"documentation":{"id":3778,"nodeType":"StructuredDocumentation","src":"38316:58:18","text":" @dev Returns the Vault's WETH instance."},"functionSelector":"ad5c4648","implemented":false,"kind":"function","modifiers":[],"name":"WETH","nameLocation":"38388:4:18","parameters":{"id":3779,"nodeType":"ParameterList","parameters":[],"src":"38392:2:18"},"returnParameters":{"id":3783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3784,"src":"38418:5:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$3081","typeString":"contract IWETH"},"typeName":{"id":3781,"nodeType":"UserDefinedTypeName","pathNode":{"id":3780,"name":"IWETH","nameLocations":["38418:5:18"],"nodeType":"IdentifierPath","referencedDeclaration":3081,"src":"38418:5:18"},"referencedDeclaration":3081,"src":"38418:5:18","typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$3081","typeString":"contract IWETH"}},"visibility":"internal"}],"src":"38417:7:18"},"scope":3785,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":3281,"name":"ISignaturesValidator","nameLocations":["1349:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":3047,"src":"1349:20:18"},"id":3282,"nodeType":"InheritanceSpecifier","src":"1349:20:18"},{"baseName":{"id":3283,"name":"ITemporarilyPausable","nameLocations":["1371:20:18"],"nodeType":"IdentifierPath","referencedDeclaration":3066,"src":"1371:20:18"},"id":3284,"nodeType":"InheritanceSpecifier","src":"1371:20:18"},{"baseName":{"id":3285,"name":"IAuthentication","nameLocations":["1393:15:18"],"nodeType":"IdentifierPath","referencedDeclaration":3029,"src":"1393:15:18"},"id":3286,"nodeType":"InheritanceSpecifier","src":"1393:15:18"}],"canonicalName":"IVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":3280,"nodeType":"StructuredDocumentation","src":"1157:171:18","text":" @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n don't override one of these declarations."},"fullyImplemented":false,"linearizedBaseContracts":[3785,3029,3066,3047],"name":"IVault","nameLocation":"1339:6:18","scope":3786,"usedErrors":[],"usedEvents":[3055,3306,3335,3385,3397,3420,3456,3475,3574,3666,3726,3764]}],"license":"GPL-3.0-or-later"},"id":18}